name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        go-version: ["1.24.4"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key:
            ${{ runner.os }}-go-${{ matrix.go-version }}-${{
            hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Download dependencies
        run: |
          go mod download
          cd sdk/evalengine && go mod download

      - name: Run tests with coverage
        run: |
          go test -cover -coverprofile=coverage.txt -covermode=atomic ./...
          cd sdk/evalengine && go test -cover -coverprofile=sdk-coverage.txt -covermode=atomic ./...

      - name: Check coverage threshold
        if: matrix.go-version == '1.24.4'
        run: |
          go tool cover -func=coverage.txt > coverage-summary.txt
          COVERAGE=$(grep total coverage-summary.txt | awk '{print $3}' | sed 's/%//')
          echo "Test coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "Error: Test coverage $COVERAGE% is below the required 70% threshold"
            exit 1
          fi

      - name: Upload coverage to Codecov
        if: matrix.go-version == '1.24.4'
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.txt,./sdk/evalengine/sdk-coverage.txt
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  race:
    name: Race Detection
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.4"

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-race-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-race-

      - name: Download dependencies
        run: |
          go mod download
          cd sdk/evalengine && go mod download

      - name: Run tests with race detector
        run: |
          echo "Running race detection tests..."
          go test -race -timeout 10m ./...
          cd sdk/evalengine && go test -race -timeout 10m ./...

  lint:
    name: Lint
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.4"

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m

      - name: Run golangci-lint on SDK
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          working-directory: sdk/evalengine
          args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: "-fmt sarif -out gosec-results.sarif ./..."

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec-results.sarif

  build:
    name: Build
    runs-on: ubuntu-22.04
    needs: [test, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.4"

      - name: Build daemon
        run: |
          mkdir -p bin
          go build -o bin/evald ./cmd/evald || echo "Daemon not implemented yet"

      - name: Build SDK
        run: |
          cd sdk/evalengine
          go build ./...
